<?php
/**
 * Plugin Name: Polylang + DeepL CLI Translator
 * Description: –ö–æ–º–∞–Ω–¥—ã WP-CLI –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ —á–µ—Ä–µ–∑ Polylang –∏ DeepL —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏.
*/

// Global translation languages
if (!defined('PLL_DEEPL_LANG_FROM')) {
    define('PLL_DEEPL_LANG_FROM', 'uk');
}

if (!defined('PLL_DEEPL_LANG_TO')) {
    define('PLL_DEEPL_LANG_TO', 'en');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞.
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–ø—Ü–∏—è WordPress -> –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞.
 */
function pll_deepl_get_lang_from() {
    $opt = get_option('pll_deepl_lang_from');
    return $opt ? $opt : PLL_DEEPL_LANG_FROM;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –æ–ø—Ü–∏—è WordPress -> –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞.
 */
function pll_deepl_get_lang_to() {
    $opt = get_option('pll_deepl_lang_to');
    return $opt ? $opt : PLL_DEEPL_LANG_TO;
}

add_action('admin_init', 'pll_deepl_register_settings');
function pll_deepl_register_settings() {
    register_setting('pll_deepl_settings', 'pll_deepl_lang_from');
    register_setting('pll_deepl_settings', 'pll_deepl_lang_to');
}

add_action('admin_menu', 'pll_deepl_add_admin_page');
function pll_deepl_add_admin_page() {
    add_menu_page(
        'DeepL Auto Translate',     // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        'Auto Translate',           // –ù–∞–∑–≤–∞–Ω–∏–µ –≤ –º–µ–Ω—é
        'manage_options',           // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        'pll-deepl-auto',           // Slug
        'pll_deepl_render_page',    // –§—É–Ω–∫—Ü–∏—è
        'dashicons-translation',    // –ò–∫–æ–Ω–∫–∞
        60                          // –ü–æ–∑–∏—Ü–∏—è
    );
}


function pll_deepl_render_page() { ?>
    <div class="wrap">
        <h1><?php esc_html_e('Auto translate', 'polylang-deepl-cli'); ?></h1>
        <form method="post" action="options.php">
            <?php settings_fields('pll_deepl_settings'); ?>
            <table class="form-table" role="presentation">
                <tr>
                    <th scope="row"><label for="pll_deepl_lang_from"><?php esc_html_e('Translate from', 'polylang-deepl-cli'); ?></label></th>
                    <td><input name="pll_deepl_lang_from" id="pll_deepl_lang_from" type="text" value="<?php echo esc_attr( get_option('pll_deepl_lang_from', PLL_DEEPL_LANG_FROM) ); ?>" class="regular-text" /></td>
                </tr>
                <tr>
                    <th scope="row"><label for="pll_deepl_lang_to"><?php esc_html_e('Translate to', 'polylang-deepl-cli'); ?></label></th>
                    <td><input name="pll_deepl_lang_to" id="pll_deepl_lang_to" type="text" value="<?php echo esc_attr( get_option('pll_deepl_lang_to', PLL_DEEPL_LANG_TO) ); ?>" class="regular-text" /></td>
                </tr>
            </table>
            <?php submit_button(); ?>
        </form>
    </div>
<?php }

function translate_preserving_tags($html, $lang_from, $lang_to) {
    $doc = new DOMDocument();
    libxml_use_internal_errors(true);
    $doc->loadHTML('<?xml encoding="utf-8" ?>' . $html);
    libxml_clear_errors();

    $xpath = new DOMXPath($doc);
    $body = $doc->getElementsByTagName('body')->item(0);

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ –≤—Å–µ—Ö –≤–∏–¥–∏–º—ã—Ö —É–∑–ª–æ–≤
    $nodes = $xpath->query('//body//text()[normalize-space()]');
    foreach ($nodes as $node) {
        if (trim($node->nodeValue)) {
            $translated = deepl_translate($node->nodeValue, $lang_from, $lang_to);
            $node->nodeValue = $translated;
        }
    }

    // –ü–µ—Ä–µ–≤–æ–¥–∏–º Spectra JSON-–±–ª–æ–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    $html = $doc->saveHTML();
    $html = preg_replace_callback(
        '/<!--\s*wp:uagb\/(.*?)\{(.*?)\}\s*-->/',
        function ($matches) use ($lang_from, $lang_to) {
            $prefix = "<!-- wp:uagb/" . $matches[1];
            $json_str = '{' . $matches[2] . '}';

            $decoded = json_decode($json_str, true);
            if (!$decoded || !is_array($decoded)) return $matches[0];

            $fields = ['heading', 'subHeading', 'prefix', 'suffix', 'text', 'label'];
            foreach ($fields as $field) {
                if (!empty($decoded[$field]) && is_string($decoded[$field])) {
                    $decoded[$field] = deepl_translate($decoded[$field], $lang_from, $lang_to);
                }
            }

            $encoded = json_encode($decoded, JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE);
            return $prefix . $encoded . ' -->';
        },
        $html
    );

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ innerHTML <body>
    $doc->loadHTML('<?xml encoding="utf-8" ?>' . $html);
    $body = $doc->getElementsByTagName('body')->item(0);
    $innerHTML = '';
    foreach ($body->childNodes as $child) {
        $innerHTML .= $doc->saveHTML($child);
    }

    return trim($innerHTML);
}

if (defined('WP_CLI') && WP_CLI) {
	require_once __DIR__ . '/includes/polylang_helpers.php';
	require_once __DIR__ . '/includes/translate_seo_fields.php';
    require_once __DIR__ . '/commands/Translate_product_category_Command.php';
    require_once __DIR__ . '/commands/Translate_Attribute_Term_Command.php';
	require_once __DIR__ . '/commands/Translate_Attribute_Command.php';
	require_once __DIR__ . '/commands/translate-woocommerce.php';
	require_once __DIR__ . '/commands/Translate-Posts-Command.php';
    require_once __DIR__ . '/commands/Translate_Taxonomies_Command.php';
    require_once __DIR__ . '/commands/Translate_Page_Command.php';
    require_once __DIR__ . '/commands/Translate_Menu_Command.php';
    require_once __DIR__ . '/commands/Translate_Custom_Post_Command.php';
	
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepL.
 */
function deepl_translate($text, $from, $to) {
    // üëâ –†—É—á–Ω–æ–π –∫–ª—é—á (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å)
    $key = '451d4e24-9768-4544-980e-5a62474cb703:fx';

    // üîç –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    WP_CLI::log("KEY: $key");
    WP_CLI::log("TEXT: " . (is_string($text) ? $text : '[–Ω–µ —Å—Ç—Ä–æ–∫–∞]'));

    // üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
    if (!$key || !is_string($key) || strlen($key) < 10) {
        WP_CLI::error("‚ùå –ù–µ—Ç API-–∫–ª—é—á–∞ DeepL.");
    }

    // üõë –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞
    if (!is_string($text) || trim($text) === '') {
        WP_CLI::log("‚è≠ –ü—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥.");
        return $text;
    }

    // üõ∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    $response = wp_remote_post('https://api-free.deepl.com/v2/translate', [
        'timeout' => 15,
        'body' => [
            'auth_key'    => $key,
            'text'        => $text,
            'source_lang' => strtoupper($from),
            'target_lang' => strtoupper($to),
        ]
    ]);

    // ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (is_wp_error($response)) {
        throw new Exception("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ DeepL: " . $response->get_error_message());
    }

    // üßæ –û—Ç–≤–µ—Ç
    $body = wp_remote_retrieve_body($response);
    $data = json_decode($body, true);

    if (!isset($data['translations'][0]['text'])) {
        throw new Exception("–û—Ç–≤–µ—Ç DeepL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $body");
    }

    // ‚úÖ –£—Å–ø–µ—Ö
    return $data['translations'][0]['text'];
}


/**
 * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—Ç—Ä–æ–∫–∞.
 */
function maybe_translate($value, $from, $to) {
    return (is_string($value) && strlen($value) > 1 && mb_detect_encoding($value, 'UTF-8', true))
        ? deepl_translate($value, $from, $to)
        : $value;
}

/**
 * –ò—Å–∫–ª—é—á–∞–µ—Ç –º–µ—Ç–∞–ø–æ–ª—è, –Ω–µ –ø–æ–¥–ª–µ–∂–∞—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—É.
 */
function is_meta_excluded($key) {
    $excluded_prefixes = [
        '_edit_', '_wp_', '_thumbnail_id', 'astra-', '_astra',
        'uagb_', '_spectra', 'spectra_', '_vc_', '_elementor_',
        '_yoast_', 'rank_math_'
    ];
    foreach ($excluded_prefixes as $prefix) {
        if (stripos($key, $prefix) === 0) return true;
    }
    return false;
}

/**
 * –ó–∞–ø–∏—Å—å –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥.
 */
function log_translation_failure($type, $id, $error) {
    $log_file = WP_CONTENT_DIR . '/cli-translations.log';
    $line = sprintf("[%s] ‚ùå –û—à–∏–±–∫–∞ %s #%d: %s\n", date('Y-m-d H:i:s'), $type, $id, $error);
    file_put_contents($log_file, $line, FILE_APPEND);
}

/**
 * –ü–æ–≤—Ç–æ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ, –º–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥.
 */
function retry_with_timeout($callback, $max_seconds = 15) {
    $start = time();
    do {
        try {
            return $callback();
        } catch (Exception $e) {
            if ((time() - $start) >= $max_seconds) {
                throw $e;
            }
            sleep(1);
        }
    } while (true);
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —è–∑—ã–∫–∞ –≤ Polylang.
 */
function ensure_language_exists($lang_code) {
    $langs = pll_languages_list();
    if (!in_array($lang_code, $langs, true)) {
        WP_CLI::error("–Ø–∑—ã–∫ '$lang_code' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Polylang.");
    }
}
